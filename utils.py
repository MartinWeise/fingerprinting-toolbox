import pandas as pd
from bitstring import BitArray
from hashlib import blake2b
import math


# returns the pandas structure of the dataset
def import_dataset(dataset_name):
    filepath = "datasets/" + dataset_name + ".csv"
    relation = pd.read_csv(filepath)
    print("Dataset: " + filepath)

    # number of tuples
    num_of_tuples = len(relation.select_dtypes(exclude='object'))
    # detect primary key
    primary_key = relation[relation.columns[0]]
    # bit range for encoding the primary key
    primary_key_len = math.floor(math.log(max(primary_key), 2)) + 1
    return relation, primary_key, primary_key_len


# returns the fingerprint (BitArray)
def create_fingerprint(fingerprint_bit_length, buyer_id, number_of_buyers, secret_key):
    if buyer_id < 0 or buyer_id >= number_of_buyers:
        print("Please specify valid buyer id")
        exit()

    # seed is generated by concatenating secret key with buyers id
    shift = 10
    # seed is 42 bit long
    seed = (secret_key << shift) + buyer_id
    b = blake2b(key=seed.to_bytes(6, 'little'), digest_size=int(fingerprint_bit_length / 8))
    fingerprint = BitArray(hex=b.hexdigest())
    return fingerprint


# sets an idx-th bit of val to mark and returns the new value
def set_bit(val, idx, mark):
    # number of bits necessary for binary representation of val
    neg_val = False
    if val < 0:
        neg_val = True
        val = -val
    if val == 0:
        mask_len = 1
    else:
        mask_len = math.floor(math.log(val, 2)) + 1
    mask = 0
    for i in range(0, mask_len):
        if i != idx:
            mask += 2 ** i
    val = val & mask
    if mark:
        val += 2 ** idx
    if neg_val:
        val = -val
    return val


def write_dataset(fingerprinted_relation, scheme_string, dataset_name, gamma, xi, buyer_id):
    new_path = scheme_string + "/fingerprinted_datasets/" + \
               dataset_name + "_" + str(gamma) + "_" + str(xi) + "_" + str(buyer_id) + ".csv"
    fingerprinted_relation.to_csv(new_path, index=False)
    print("\tfingerprinted dataset written to: " + new_path)
